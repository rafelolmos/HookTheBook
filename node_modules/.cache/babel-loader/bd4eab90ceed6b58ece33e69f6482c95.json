{"ast":null,"code":"import _defineProperty from \"/Users/rafelolmos/Documents/HookTheBook/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport \"firebase/firestore\";\n\nfunction parseDoc(doc) {\n  return _objectSpread({\n    id: doc.id\n  }, doc.data());\n}\n\nlet db;\n\nfunction getDbInstance() {\n  if (!db || db._isTerminated) {\n    db = firebase.firestore();\n  }\n\n  return db;\n}\n\nasync function getAll(collection) {\n  const db = getDbInstance();\n  const collectionData = await db.collection(collection).get();\n  const results = [];\n  collectionData.forEach(document => {\n    results.push(parseDoc(document));\n  });\n  return results;\n}\n\nasync function getAllRealTime({\n  collection,\n  filters,\n  order,\n  callback\n}) {\n  let db = getDbInstance();\n  db = db.collection(collection);\n\n  if (filters) {\n    db = db.where(filters.field, filters.condition, filters.value);\n  }\n\n  if (order) {\n    db = db.orderBy(order);\n  }\n\n  db.onSnapshot(callback);\n}\n\nasync function addItem(collection, item) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).add(item);\n  return !!result.id;\n}\n\nasync function addItemWithId(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function updateItem(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function getItem(collection, itemId) {\n  const db = getDbInstance();\n  const document = await db.collection(collection).doc(itemId).get();\n\n  if (document.exists) {\n    return parseDoc(document);\n  }\n\n  return null;\n}\n\nasync function deleteItem(collection, itemId) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(itemId).delete();\n  return !result;\n}\n\nexport { getAll, addItem, getItem, getAllRealTime, deleteItem, addItemWithId, updateItem };","map":{"version":3,"sources":["/Users/rafelolmos/Documents/HookTheBook/src/services/database.js"],"names":["firebase","parseDoc","doc","id","data","db","getDbInstance","_isTerminated","firestore","getAll","collection","collectionData","get","results","forEach","document","push","getAllRealTime","filters","order","callback","where","field","condition","value","orderBy","onSnapshot","addItem","item","result","add","addItemWithId","set","updateItem","getItem","itemId","exists","deleteItem","delete"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport \"firebase/firestore\";\n\nfunction parseDoc(doc) {\n  return {\n    id: doc.id,\n    ...doc.data()\n  }\n}\n\nlet db;\nfunction getDbInstance() {\n  if (!db || db._isTerminated) {\n    db = firebase.firestore();\n  }\n  return db;\n}\n\nasync function getAll(collection) {\n  const db = getDbInstance();\n  const collectionData = await db.collection(collection).get();\n  \n  const results = [];\n  collectionData.forEach((document) => {\n    results.push(parseDoc(document));\n  });\n\n  return results;\n}\n\nasync function getAllRealTime({ collection, filters, order, callback }) {\n  let db = getDbInstance();\n  db = db.collection(collection);\n  if (filters){\n    db = db.where(filters.field, filters.condition, filters.value);\n  }\n  if (order){\n    db = db.orderBy(order);\n  }\n  db.onSnapshot(callback)\n}\n\nasync function addItem(collection, item) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).add(item)\n  return !!result.id;\n}\n\nasync function addItemWithId(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function updateItem(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function getItem(collection, itemId) {\n  const db = getDbInstance();\n  const document = await db.collection(collection).doc(itemId).get();\n  \n  if (document.exists) {\n    return parseDoc(document);\n  } \n  return null; \n}\n\nasync function deleteItem(collection, itemId) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(itemId).delete();\n  return !result;\n}\n\n\nexport {\n  getAll,\n  addItem,\n  getItem,\n  getAllRealTime,\n  deleteItem,\n  addItemWithId,\n  updateItem\n}"]},"metadata":{},"sourceType":"module"}