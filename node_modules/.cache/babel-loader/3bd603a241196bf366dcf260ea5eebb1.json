{"ast":null,"code":"import _defineProperty from \"/Users/rafelolmos/Documents/HookTheBook/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport \"firebase/firestore\";\n\nfunction parseDoc(doc) {\n  return _objectSpread({\n    id: doc.id\n  }, doc.data());\n}\n\nlet db;\n\nfunction getDbInstance() {\n  if (!db || db._isTerminated) {\n    db = firebase.firestore();\n  }\n\n  return db;\n}\n\nasync function getAll(collection) {\n  const db = getDbInstance();\n  const collectionData = await db.collection(collection).get();\n  const results = [];\n  collectionData.forEach(document => {\n    results.push(parseDoc(document));\n  });\n  return results;\n}\n\nasync function getAllRealTime({\n  collection,\n  filters,\n  order,\n  callback\n}) {\n  const db = getDbInstance();\n  const dbCollection = db.collection(collection);\n  const collectionFiltered = dbCollection.where(filters.field, filters.condition, filters.value);\n  const collectionOrdered = collectionFiltered.orderBy(order);\n\n  const llamaACallBackWithData = collectionData => callback(collectionData);\n\n  collectionOrdered.onSnapshot(llamaACallBackWithData);\n}\n\nasync function addItem(collection, item) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).add(item);\n  return !!result.id;\n}\n\nasync function addItemWithId(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function getItem(collection, itemId) {\n  const db = getDbInstance();\n  const document = await db.collection(collection).doc(itemId).get();\n\n  if (document.exists) {\n    return parseDoc(document);\n  }\n\n  return null;\n}\n\nasync function deleteItem(collection, itemId) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(itemId).delete();\n  return !result;\n}\n\nexport { getAll, addItem, getItem, getAllRealTime, deleteItem, addItemWithId };","map":{"version":3,"sources":["/Users/rafelolmos/Documents/HookTheBook/src/services/database.js"],"names":["firebase","parseDoc","doc","id","data","db","getDbInstance","_isTerminated","firestore","getAll","collection","collectionData","get","results","forEach","document","push","getAllRealTime","filters","order","callback","dbCollection","collectionFiltered","where","field","condition","value","collectionOrdered","orderBy","llamaACallBackWithData","onSnapshot","addItem","item","result","add","addItemWithId","set","getItem","itemId","exists","deleteItem","delete"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport \"firebase/firestore\";\n\nfunction parseDoc(doc) {\n  return {\n    id: doc.id,\n    ...doc.data()\n  }\n}\n\nlet db;\nfunction getDbInstance() {\n  if (!db || db._isTerminated) {\n    db = firebase.firestore();\n  }\n  return db;\n}\n\nasync function getAll(collection) {\n  const db = getDbInstance();\n  const collectionData = await db.collection(collection).get();\n  \n  const results = [];\n  collectionData.forEach((document) => {\n    results.push(parseDoc(document));\n  });\n\n  return results;\n}\n\n\nasync function getAllRealTime({ collection, filters, order, callback }) {\n  const db = getDbInstance();\n  const dbCollection = db.collection(collection);\n  const collectionFiltered = dbCollection.where(filters.field, filters.condition, filters.value);\n  const collectionOrdered = collectionFiltered.orderBy(order);\n  const llamaACallBackWithData = (collectionData) => callback(collectionData)\n  collectionOrdered.onSnapshot(llamaACallBackWithData)\n}\n\nasync function addItem(collection, item) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).add(item)\n  return !!result.id;\n}\n\nasync function addItemWithId(collection, item, id) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(id).set(item);\n  return !result;\n}\n\nasync function getItem(collection, itemId) {\n  const db = getDbInstance();\n  const document = await db.collection(collection).doc(itemId).get();\n  \n  if (document.exists) {\n    return parseDoc(document);\n  } \n  return null; \n}\n\nasync function deleteItem(collection, itemId) {\n  const db = getDbInstance();\n  const result = await db.collection(collection).doc(itemId).delete();\n  return !result;\n}\n\nexport {\n  getAll,\n  addItem,\n  getItem,\n  getAllRealTime,\n  deleteItem,\n  addItemWithId\n}"]},"metadata":{},"sourceType":"module"}